# -*- coding: utf-8 -*-
import html
import re
import requests
from datetime import datetime, timedelta

import functions as bf
import database as database
import config as config
from funclist import Funclist


@bf.register(Funclist.standartfunclist)
@bf.addtrigger(bf.standart_trigger)
class SetGroup:
    keywords = ['–≥—Ä—É–ø–ø–∞']
    commands = keywords
    attachment = []
    help_name = '–ì—Ä—É–ø–ø–∞'
    help_content = '–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤–∞—à—É –≥—Ä—É–ø–ø—É (–ø–æ —Å–∞–π—Ç—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º)'
    help_deep = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–±–æ—Ç –≥—Ä—É–ø–ø–∞ 9999", —Ü–∏—Ñ—Ä—ã –±—Ä–∞—Ç—å –∏–∑ —Å—Å—ã–ª–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'

    def answer(self, message, vk, *rest):
        group = re.findall(r'[0-9]+', message.text)[0]

        if database.ForAllDataBase.getbyunique(int(message.peer_id), 'narfu_group'):
            database.ForAllDataBase.update(int(message.peer_id), 'narfu_group', group)
        else:
            database.ForAllDataBase.add(int(message.peer_id), 'narfu_group', group)

        bf.sendmessage(vk, peer_id=message.peer_id, answer="–°–æ—Ö—Ä–∞–Ω–∏–ª, –µ—â—ë —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã —Å–∫–∏–Ω—É–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä"
                                                           " –≥—Ä—É–ø–ø—ã –∏–∑ https://ruz.narfu.ru/?timetable&group=–¢–£–¢–ù–û–ú–ï–†,"
                                                           " –∞ –Ω–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π")


@bf.register(Funclist.standartfunclist)
@bf.addtrigger(bf.standart_trigger)
class Raspisanie:
    keywords = ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ø–∞—Ä—ã', 'test']
    commands = keywords
    attachment = []
    help_name = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
    help_content = '–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞—Ñ—É'
    help_deep = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "–±–æ—Ç –ø–∞—Ä—ã" –∏–ª–∏ "–±–æ—Ç –ø–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞" –∏–ª–∏ "–±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"'

    def answer(self, message, vk, *rest):
        ans = ''
        error = ''
        group = database.ForAllDataBase.getbyunique(int(message.peer_id), 'narfu_group')

        if not group:
            ans = '–Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. "–±–æ—Ç –≥—Ä—É–ø–ø–∞ 9999" - –∫–æ–º–∞–Ω–¥–∞ —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –º–Ω–µ –µ–≥–æ. –ù–æ–º–µ—Ä –±—Ä–∞—Ç—å —Å —Å–∞–π—Ç–∞' \
                  ' —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: https://ruz.narfu.ru/?timetable&group=–¢–£–¢–ù–û–ú–ï–†'

        if not ans:
            try:
                req = requests.get(f'https://ruz.narfu.ru/?timetable&group={int(group)}')
                req.encoding = 'utf-8'

                day = (datetime.today() + timedelta(days=(1 if '–∑–∞–≤—Ç—Ä–∞' in message.text.lower() else 0),
                                                    hours=(0 if '—Å–µ–≥–æ–¥–Ω—è' in message.text.lower() else 8))).strftime(
                    '%d.%m.%Y')

                days = re.findall(r'<div class="list(?: last)? col-md-2([^‚ô•]*?)<!-- list -->', req.text)
                classes = [x for x in days if re.findall(r'[0-9]{2}.[0-9]{2}.[0-9]{4}', x)[0] == day][0]
                classes = re.findall(r'<div class="timetable_sheet_xs visible-xs visible-sm([^‚ô•]*?)</div>', classes)
                result = []

                for clas in classes:
                    result.append(dict(num_para=re.findall(r'<span class="num_para">([^‚ô•]*?)</span>', clas)[0],
                                       time_para=html.unescape(
                                           re.findall(r'<span class="time_para">([^‚ô•]*?)</span>', clas)[0].strip()),
                                       kind_of_work=re.findall(r'<span class="kindOfWork">([^‚ô•]*?)</span>', clas)[0],
                                       discipline=re.findall(r'<span class="discipline">([^‚ô•]*?)</span>', clas)[0],
                                       lecturer=re.findall(r'<span class="lecturer">([^‚ô•]*?)</span>', clas),
                                       auditorium=html.unescape(re.findall(r'<b>([^‚ô•]*?)</b>', clas)[0].strip()),
                                       group=re.findall(r'<span class="group">([^‚ô•]*?)</span>', clas)
                                       ))

                # üìóüìòüìôüìï
                emoji = {'–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è': 'üìô', '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è': 'üìò', '–õ–µ–∫—Ü–∏–∏': 'üìó', 'empty': 'üìï'}
                for x in result:
                    ans += f'{x.get("num_para")}) ' \
                           f'{emoji.get(x.get("kind_of_work")) if x.get("kind_of_work") in emoji else emoji["empty"]}' \
                           f'{x.get("discipline")}\n' \
                           f'{x.get("time_para")} {x.get("kind_of_work")} ' \
                           f'{x.get("lecturer")[0] if x.get("lecturer") else ""}\n' \
                           f'{x.get("auditorium")} {x.get("group")[0] if x.get("group") else ""}\n'

                if not ans:
                    ans = '–Ø –Ω–µ –Ω–∞—à–µ–ª –ø–∞—Ä –∏–ª–∏ –∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç'

                ans = f'{day}:\n{ans}'

            except Exception as e:
                bf.sendmessage(vk, peer_id=config.creator_id, answer=f'–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}')

        bf.sendmessage(vk, peer_id=message.peer_id, answer=ans)
